# -*- coding: utf-8 -*-
"""Chunked_Iterator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16mTsFhT2255XUif8ka3UDX2qu-Y60oHL
"""

#Implement an iterator that yields chunks of a specified size from a given list.

#Create a class called `ChunkedIterator`.
class ChunkedIterator:

#Define an `__init__` method to initialize the list and the chunk size.
    def __init__(self, data_list, chunk_size):
      self.data_list = data_list
      self.chunk_size = chunk_size
      self.current_index = 0

#Implement the `__iter__` method to return the iterator object.
    def __iter__(self):
      return self

#Implement the `__next__` method to yield chunks of the specified size.
    def __next__(self):
      if self.current_index >= len(self.data_list):
        raise StopIteration
      end_index = min(self.current_index + self.chunk_size, len(self.data_list))
      chunk = self.data_list[self.current_index:end_index]
      self.current_index = end_index
      return chunk

#Create an instance of `ChunkedIterator` with a specific list and chunk size.
x = ChunkedIterator([12,22,8,52,45,98,18], 3)

#Use a `for` loop or the `next()` function to iterate through the chunks.
for chunk in x:
  print(chunk)

