# -*- coding: utf-8 -*-
"""Prime_Iterator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HjKxsoBrJYRZ5RCnmtIDDkQv7tCAXOcN
"""

# Implement an Iterator for Prime Numbers

#Create a class called `PrimeIterator`.
class PrimeIterator:

#Define an `__init__` method to initialize the limit and the current number to be checked.
    def __init__(self, limit):
      self.limit = limit
      self.current = 1

#Implement the `__iter__` method to return the iterator object itself.
    def __iter__(self):
      return self

#Implement the `__next__` method to find and return the next prime number.
    def __next__(self):
      self.current +=1
      while self.current <= self.limit:
        if self.is_prime(self.current):
          return self.current
        self.current += 1
      raise StopIteration

    def is_prime(self, num):
      if num < 2:
        return False
      for i in range(2, int(num**0.5)+1):
        if num % i == 0:
          return False
      return True

#Create an instance of `PrimeIterator` with a specific limit.
x = PrimeIterator(20)

#Use a `for` loop or the `next()` function to iterate through the prime numbers.
for prime in x:
  print(prime)

