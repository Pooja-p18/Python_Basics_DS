# -*- coding: utf-8 -*-
"""CarRental_system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P5vk4a94ClX6cMUIOsRTxM0aKLYZgaxE
"""

# Implement a simple car rental system with classes for cars and rentals.
from datetime import datetime
# Define a `Car` Class
class Car:
  def __init__(self, make, model, year, rental_rate, availability=True):
    self.make = make
    self.model = model
    self.year = year
    self.rental_rate = rental_rate
    self.availability = availability

  def rent_car(self):
    if self.availability:
      self.availability = False
      print(f"Rented {self.make} {self.model} for ₹{self.rental_rate} per day.")
      return True
    else:
      print(f"{self.make} {self.model} is not available for rent.")
      return False


  def return_car(self):
    self.availability = True
    print(f"Returned {self.make} {self.model}.")

  def display_info(self):
    print(f"Make: {self.make} | Model: {self.model} | Year: {self.year} | Rental Rate: ₹{self.rental_rate} per day")

class Rental:
  def __init__(self, rental_id, car, customer_name, rental_date, return_date):
    self.rental_id = rental_id
    self.car = car
    self.customer_name = customer_name
    self.rental_date = datetime.strptime(rental_date, "%Y-%m-%d")
    self.return_date = datetime.strptime(return_date, "%Y-%m-%d")
    self.total_cost = 0

  def calculate_total_cost(self):
    days_rented = (self.return_date - self.rental_date).days
    self.total_cost = days_rented * self.car.rental_rate
    return self.total_cost


  def display_rental_info(self):
    print(f"\nRental ID: {self.rental_id}")
    print(f"Customer: {self.customer_name}")
    print(f"Car: {self.car.make} {self.car.model}")
    print(f"Rental Date: {self.rental_date.date()}")
    print(f"Return Date: {self.return_date.date()}")
    print(f"Total Cost: ₹{self.calculate_total_cost()}\n")

# Test the system

# Manage Rental Records
rental_records = []


if __name__ == "__main__":
    # Create cars
    car1 = Car("Toyota", "Innova", 2020, 2000)
    car2 = Car("Honda", "City", 2019, 1800)

    # Display cars
    car1.display_info()
    car2.display_info()

    # Rent a car
    if car1.rent_car():
        rental1 = Rental("R001", car1, "RD Sharma", "2025-07-25", "2025-07-30")
        rental_records.append(rental1)

    # Try renting the same car again (should be unavailable)
    car1.rent_car()

    # Display rental info
    if rental_records:
      rental_records[0].display_rental_info()


    # Return the car
    car1.return_car()

    # Try renting again (should now be available)
    if car1.rent_car():
        rental2 = Rental("R002", car1, "Kiran Patel", "2025-08-01", "2025-08-04")
        rental_records.append(rental2)

    # Display all rental records
    print("\nAll Rentals:")
    for rental in rental_records:
        rental.display_rental_info()

    # Display final car status
    car1.display_info()
    car2.display_info()

